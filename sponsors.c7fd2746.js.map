{"mappings":"AACA,+DAA+D;AAC/D,MAAM,wBAAwB,CAAC;IAC3B,MAAM,WAAW,SAAS,gBAAgB,CAAC;IAE3C,MAAM,WAAW,IAAI,qBAAqB,CAAC,SAAS;QAChD,QAAQ,OAAO,CAAC,CAAC;YACb,IAAI,MAAM,cAAc,EAAE;gBACtB,MAAM,eAAe,SAAS,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,YAAY,CAAC;gBAC7E,MAAM,QAAQ,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,YAAY,CAAC;gBAC7D,MAAM,QAAQ,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,YAAY,CAAC;gBAE7D,WAAW;oBAAO,QAAQ,MAAM,MAAM,EAAE,cAAa,OAAM;gBAAM,GAAE;gBAEnE,SAAS,SAAS,CAAC,MAAM,MAAM,GAAG,8DAA8D;YACpG;QACJ;IACJ;IAEA,SAAS,OAAO,CAAC,CAAC;QACd,SAAS,OAAO,CAAC;IACrB;AACJ;AACA,mCAAmC;AACnC,MAAM,UAAU,CAAC,SAAS,cAAc,OAAO;IACvC,MAAM,WAAW;IACjB,MAAM,gBAAgB,OAAO;IAC7B,MAAM,cAAc,KAAK,KAAK,CAAC,WAAW;IAC1C,MAAM,cAAc,CAAA,IAAK,IAAK,CAAA,IAAI,CAAA;IAClC,IAAI,QAAQ;IAEZ,MAAM,OAAO,CAAC;QACV;QACA,MAAM,WAAW,QAAQ;QACzB,MAAM,eAAe,KAAK,KAAK,CAAC,YAAY,YAAY;QACxD,IAAI,SAAS,QACT,QAAQ,aAAa,CAAC,OAAO,WAAW,GAAG,QAAQ;aAGnD,QAAQ,aAAa,CAAC,OAAO,WAAW,GAAG,eAAe;QAI9D,IAAI,QAAQ,aACR,sBAAsB;IAE9B;IAEA,sBAAsB;AAM9B;AAEA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,sBAAsB;AAE1B","sources":["count-up-animation.js"],"sourcesContent":["\r\n// Function to start counting animation when element is in view\r\nconst startCountingOnScroll = (delay) => {\r\n    const elements = document.querySelectorAll('.counting-container');\r\n\r\n    const observer = new IntersectionObserver((entries, observer) => {\r\n        entries.forEach((entry) => {\r\n            if (entry.isIntersecting) {\r\n                const targetNumber = parseInt(entry.target.querySelector('div').getAttribute('data-target'));\r\n                const units = entry.target.querySelector('div').getAttribute('units');\r\n                const where = entry.target.querySelector('div').getAttribute('where');\r\n                \r\n                setTimeout(() => {countUp(entry.target, targetNumber,units,where)},delay)\r\n                ;\r\n                observer.unobserve(entry.target); //<------ add this if you want counting up to only happen once\r\n            }\r\n        });\r\n    });\r\n\r\n    elements.forEach((element) => {\r\n        observer.observe(element);\r\n    });\r\n};\r\n// Function to animate the counting\r\nconst countUp = (element, targetNumber, units, where) => {\r\n        const duration = 3000\r\n        const frameDuration = 1000 / 60;\r\n        const totalFrames = Math.round(duration / frameDuration);\r\n        const easeOutQuad = t => t * (2 - t);\r\n        let frame = 0;\r\n    \r\n        const step = (timestamp) => {\r\n            frame++;\r\n            const progress = frame / totalFrames;\r\n            const currentCount = Math.round(easeOutQuad(progress) * targetNumber);\r\n            if (where == \"left\") {\r\n                element.querySelector('div').textContent = units + currentCount ;\r\n            }\r\n            else {\r\n                element.querySelector('div').textContent = currentCount + units;\r\n\r\n            }\r\n    \r\n            if (frame < totalFrames) {\r\n                requestAnimationFrame(step);\r\n            }\r\n        };\r\n    \r\n        requestAnimationFrame(step);\r\n\r\n    \r\n   \r\n       \r\n    \r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    startCountingOnScroll(800);\r\n    \r\n});\r\n"],"names":[],"version":3,"file":"sponsors.c7fd2746.js.map","sourceRoot":"/__parcel_source_root/"}